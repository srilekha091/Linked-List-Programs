SORTING:

1. SELECTION SORT

void SelectionSort(int A[], int n)
	{
		for(int i = 0; i < n - 1; i++)
		{
			int iMin = i;

			for(int j = i + 1; j < n; j++){

				if( A[j] < a[iMIn]){
				
					iMin = j; //updating the index of minimum element
				}
	int temp = A[i];
	A[i] = A[iMin];
	A[iMin] = temp;

int main(){
	int A[] = {2, 7, 4, 1, 5, 3};
	SelectionSort(A,6);
	for (int i = 0; i < 6; i++)
		cout << A[i] << " ";
}

Time Complexicity: O(n2)

*****************************************************************************************

2.BUBBLE SORT

PSEUDO CODE:

for ( int k = 1; k < n - 1; k++){ // After n-1 passes we are guarantee to be sorted 

	int flag = 0;//using flag so that we dont repeating sorting after sorting all elements
	for ( int i = 0; i < n - 2; i++){

		if( A[i] < A[i+1]){

			swap( A[i], A[i+1])
			flag = 1;
		}
	}

	if( flag == 0);
	break;
}

Time Complexicity:

T(n) = (n-1)x(n-1)xC
	= Cn2 - 2CN + 1
	= O(n2)

Best Case: O(n)
Average Case: O(n2)
Worst Case : O(n2)

*****************************************************************************************

3. INSERTION SORT

Its better than Selection and Bubble Sort.
The number f comparisions and shifts in all practical sessions is lot less.

PSEUDO CODE:

for i = 1 to n-1

value = A[i]
hole = i

while ( hole > 0 && A[hole - 1] > value){
A[hole] = A[hole - 1]
hole = hole - 1;
}

A[hole] = value;

Time Complexicity:

Best Case: O(n)
Average Case: O(n2)
Worst Case (when we have reverse sorted array) : O(n2)

*****************************************************************************************

4. MERGE SORT

PSEUDO CODE:

****************************************************************************************

5.QUICK SORT

PSEUDO CODE:

****************************************************************************************
****************************************************************************************
****************************************************************************************

SEARCHING:

BINARY SEARCH: 

*********Iterative Implementation:*********

int BinarySearch ( int A[], int n, int x)
{
	int low = 0, high = n - 1;
	while ( low <= high)
	{
		int mid = low + (high - low)/2;
		if ( x = A[mid]) 
		{
		return mid;
		}
		else if ( x < A[mid]) 	
		{
		high = mid - 1;
		}
		else 
		{
		low = mid + 1;
		}
	}
	return -1;
}
int main()
{
int A[] = { 2, 4, 5, 7, 13, 14, 15, 23}
{
int x;
printf("Enter the number to be searched : ");
scanf("%d", &x);
int index = BinarySearch(A, 8, x);
if(index != -1) printf("Number %d is at index %d", x, n);
else printf("Number %d is not found", x);
}


Time Complexicity: O(Log n)

n ......n/2......n/4.....takes k step 

k = log2n

*********Recursive implementation:*********
PSEUDO CODE:

BinarySearch(A, low, high, x)
{	
	if ( low > high) return -1;
	int mid = low + (high - low)/2;
	if ( x == A[mid]) return mid;
	else if( x > A[mid]) return BinarySearch(A, mid + 1, high, x);
	else return BinarySearch(A, low, mid - 1, x);
}


*********FIRST OCCURANCE:*********

if ( x == A[mid]) 
result =  mid;
high = mid - 1;

*********LAST OCCURANCE:*********

if ( x == A[mid]) 
result =  mid;
low = mid + 1; 


*********Count occurrences of a number in a sorted array 
with duplicates using Binary Search*********


int BinarySearch ( int A[], int n, int x, bool firstSearch)
{
	int low = 0, high = n - 1, result = -1;
	while ( low <= high)
	{
		int mid = low + (high - low)/2;
		if ( x = A[mid]) 
		{
		return mid; /////////////////////////////////////////////////////
		}
		else if ( x < A[mid]) 	
		{
		high = mid - 1;
		}
		else 
		{
		low = mid + 1;
		}
	}
	return result;
}
int main()
{
int A[] = { 2, 4, 5, 7, 13, 14, 15, 23}
{
int x;
printf("Enter the number to be searched : ");
scanf("%d", &x);
int index = BinarySearch(A, 8, x);
if(index = -1) printf("Number %d is at index %d");
else printf("Number %d is not found");
}











































				