DATA STRUCTURES:

STACKS:

1. Linked List implementation of stacks


struct Node {
	int data; 
	Node* link;
};

Node* top = NULL;

void push(int x) {
	Node* temp = (Node*)malloc(sizeof(Node));
	temp->data = x;
	temp->link = top;
	top = temp;
}

void pop() {
	Node* temp = top;
	if (temp == NULL) {
		return;
	}
	top = top->link;
	free(temp);	
}

void Print() {
	Node* temp = top;
	while (temp != NULL) {
		printf("%d", temp->data);
		temp = temp->link;
	}
	printf("\n");
}

int Top() {
	return top->data;
}

bool IsEmpty() {
	if (top == NULL) {
		return true;
	}
	else {
		return false;
	}
}

int main()
{
	push(2); Print();
	push(5); Print();
	push(3); Print();
	pop(); Print();
	push(6); Print();
	if (IsEmpty()) {
		printf("Empty");
	}
	else {
		printf("No");
	}

	return 0;
}
******************************************************************************************

2. Array implementation of stacks


int A[MAX_SIZE];
int top = -1;

void push(int x) {
	if (top == MAX_SIZE - 1) {
		printf("Error: Stack Overflow \n");
		return;
	}
	A[++top] = x;
}

void pop() {
	if (top == -1) {
		printf("Error: Stack is Empty \n");
		return;
	}
	top--;
}

int Top() {
	return A[top];
}

void Print() {
	int i;
	printf("Stack : ");
	for (i = 0; i <= top; i++) {
		printf(" %d ", A[i]);
	}
	printf("\n");
}

int IsEmpty()
{
	if (top == -1) return 1;
	return 0;
}

int main()
{
	push(2); Print();
	push(5); Print();
	push(3); Print();
	pop(); Print();
	push(6); Print();
	if (IsEmpty()) {
		printf("Empty");
	}
	else {
		printf("No");
	}

	return 0;
}
******************************************************************************************
******************************************************************************************

LINKED LIST:

1. INSERTING NODE AT THE BEGINING.

using namespace std;

struct Node {
	int data;
	Node* link;
};

Node* head;

void Insert(int x) {
	Node* temp = (Node*)malloc(sizeof(Node));
	temp->data = x;
	temp->link = head;
	head = temp;
}

void Print() {
	Node* temp = head;
	printf("List is : ");
	while (temp != NULL) {
		printf(" %d ", temp->data);
		temp = temp->link;
	}
	printf("\n");
}

int main() {
	head = NULL;
	int n, i, x;
	printf("Enter how many numbers : \n");
	scanf_s("%d", &n);
	for (i = 0; i < n; i++) {
		printf("Enter the number : \n");
		scanf_s("%d", &x);
		Insert(x);
		Print();
	}
	getchar();
}
******************************************************************************************

2.INSERTING NODE AT nTH POSITION

struct Node {
	int data;
	struct Node* next;
};

struct Node* head;

void Insert(int data, int n) {
	Node* temp1 = new Node();
	temp1->data = data;
	temp1->next = NULL;
	if (n == 1) {
		temp1->next = head;
		head = temp1;
		return;
	}
	Node* temp2 = head;
	for (int i = 0; i < n - 2; i++) {
		if(temp2 == null)
		{
			return;
		}
		temp2 = temp2->next;
	}
	temp1->next = temp2->next;
	temp2->next = temp1;
}

void Print() {
	Node* temp = head;
	while (temp != NULL) {
		printf("%d", temp->data);
		temp = temp->next;
	}
	printf("/n");
}

int main() {
	head = NULL;
	Insert(2, 1); //2
	Insert(3, 2); //3 2
	Insert(4, 1); //4 3 2
	Insert(5, 2); // 4 5 3 2
	Print();
	getchar();
}
*****************************************************************************************************

3. DELETING NODE AT nTH POSITION:

struct Node {
	int data;
	struct Node* next;
};

struct Node* head;

void Insert(int data, int n) {
	Node* temp1 = new Node();
	temp1->data = data;
	temp1->next = NULL;
	if (n == 1) {
		temp1->next = head;
		head = temp1;
		return;
	}
	Node* temp2 = head;
	for (int i = 0; i <= n - 2; i++) {
		temp2 = temp2->next;
	}
	temp1->next = temp2->next;
	temp2->next = temp1;
}

void Print() {
	Node* temp = head;
	while (temp != NULL) {
		printf("%d", temp->data);
		temp = temp->next;
	}
	printf("/n");
}

void Delete(int n) {
	struct Node* temp1 = head;

	if (n == 1) {
		if (temp1 == NULL)
		{
			return;
		}		
		head = temp1->next;
		free(temp1);
		return;
	}
	int i;
	for (i = 0; i < n - 2; i++) {
		if (temp1 == NULL)
		{
			// there are less than n elements in the list
			// hence cannot delete the nth element.
			return;
		}
		temp1 = temp1->next;
	}
	struct Node* temp2 = temp1->next;
	if (temp2 == NULL)
	{
		// if there are only n-1 elements in the list, 
		// we return since there is no nth element to delete.
		return;
	}
	temp1->next = temp2->next;
	free(temp2);
}

int main() {
	head = NULL;
	Insert(2, 1); //2
	Insert(3, 2); //3 2
	Insert(4, 1); //4 3 2
	Insert(5, 2); // 4 5 3 2
	Print();
	int n;
	printf("Enter the position : ");
	scanf("%d", n);
	Delete(n);
	Print();
}

*****************************************************************************************************
//Removing duplicates from an unsorted list using HashMap

// TestCPPProject.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<map>

using namespace std;

struct Node {
	int data;
	struct Node* next;
};

struct Node* head;

void Insert(int data, int n) {
	Node* temp1 = new Node();
	temp1->data = data;
	temp1->next = NULL;
	if (n == 1) {
		temp1->next = head;
		head = temp1;
		return;
	}
	Node* temp2 = head;
	for (int i = 0; i < n - 2; i++) {
		if (temp2 == NULL)
		{
			return;
		}
		temp2 = temp2->next;
	}
	if (temp2 == NULL)
	{
		return;
	}
	temp1->next = temp2->next;
	temp2->next = temp1;
}

void Print() {
	Node* temp = head;
	while (temp != NULL) {
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

void Delete(int n) {
	struct Node* temp1 = head;

	if (n == 1) {
		if (temp1 == NULL)
		{
			return;
		}		
		head = temp1->next;
		free(temp1);
		return;
	}
	int i;
	for (i = 0; i < n - 2; i++) {
		if (temp1 == NULL)
		{
			// there are less than n elements in the list
			// hence cannot delete the nth element.
			return;
		}
		temp1 = temp1->next;
	}
	struct Node* temp2 = temp1->next;
	if (temp2 == NULL)
	{
		// if there are only n-1 elements in the list, 
		// we return since there is no nth element to delete.
		return;
	}
	temp1->next = temp2->next;
	free(temp2);
}

void RemoveDuplicates()
{
	if (head == NULL)
	{
		return;
	}

	Node* temp1 = head;
	map<int, bool> uniqueMap; //Creating a hashtable. It takes a <key,value> pair. we use only the key here.
	uniqueMap[temp1->data] = true;

	while (temp1->next != NULL)
	{
		Node* temp2 = temp1->next;
		if (uniqueMap.find(temp2->data) != uniqueMap.end())
		{
			// temp2->data already exists in the map
			temp1->next = temp2->next;
			free(temp2);	
		}
		else
		{
			uniqueMap[temp2->data] = true;
			temp1 = temp1->next;
		}
	}

}

int main() {
	head = NULL;
	Insert(5, 1); //2
	Insert(10, 2); //3 2
	Insert(5, 3); //4 3 2
	Insert(15, 4); // 4 5 3 2
	Insert(10, 5);
	Print();
	/*int n = 0;
	cout << "Enter the position : ";
	cin >> n;
	Delete(n);*/
	getchar();

	RemoveDuplicates();
	Print();
	getchar();

}
 



